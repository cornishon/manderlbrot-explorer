#version 430

#ifndef CELL_SIZE
#define CELL_SIZE 8
#endif

layout(local_size_x = CELL_SIZE, local_size_y = CELL_SIZE, local_size_z = 1) in;

layout(set = 1, binding = 0, rgba32f) uniform writeonly image2D img;
layout(set = 2, binding = 0, std140) uniform ViewBox {
    vec2 min_bounds;
    vec2 max_bounds;
};

vec2 remap(vec2 old_value, vec2 old_min, vec2 old_max, vec2 new_min, vec2 new_max) {
    vec2 old_range = old_max - old_min;
    vec2 new_range = new_max - new_min;
    return ((old_value - old_min) / old_range) * new_range + new_min;
}

void main() {
    vec2 c = remap(gl_GlobalInvocationID.xy, vec2(0), imageSize(img), min_bounds, max_bounds);

    vec2 z = vec2(0.0, 0.0);
    float i;
    for (i = 0.0; dot(z, z) < 4.0 && i < 1.0; i += 0.002) {
        float rr = z.x * z.x;
        float ii = z.y * z.y;
        float ri = z.x * z.y;
        z = vec2(rr - ii, ri + ri) + c;
    }

    vec4 to_write = vec4(vec3(i), 1.0);
    vec2 coord = gl_GlobalInvocationID.xy;
    imageStore(img, ivec2(coord), to_write);
}

