#version 430

#ifndef R
#define R 20
#endif

#ifndef MAX_ITER
#define MAX_ITER 400
#endif

#ifndef CELL_SIZE
#define CELL_SIZE 8
#endif

layout(local_size_x = CELL_SIZE, local_size_y = CELL_SIZE, local_size_z = 1) in;

layout(set = 0, binding = 0) readonly buffer Palette {
    vec4 palette[];
};
layout(set = 1, binding = 0, rgba32f) uniform writeonly image2D img;
layout(set = 2, binding = 0, std140) uniform ViewBox {
    dvec2 min_bounds;
    dvec2 max_bounds;
};

dvec2 remap(dvec2 old_value, dvec2 old_min, dvec2 old_max, dvec2 new_min, dvec2 new_max) {
    dvec2 old_range = old_max - old_min;
    dvec2 new_range = new_max - new_min;
    return ((old_value - old_min) / old_range) * new_range + new_min;
}

vec4 colormap_lookup(float mu) {
    float v = pow(mu / MAX_ITER, 0.5) * float(palette.length() - 1);
    vec4 c1 = palette[int(floor(v))];
    vec4 c2 = palette[int(ceil(v))];
    return mix(c1, c2, fract(v));
}

dvec2 f(dvec2 z, dvec2 c) {
    double rr = z.x * z.x;
    double ii = z.y * z.y;
    double ri = z.x * z.y;
    return dvec2(rr - ii, ri + ri) + c;
}

void main() {
    dvec2 c = remap(gl_GlobalInvocationID.xy, dvec2(0), imageSize(img), min_bounds, max_bounds);
    dvec2 z = dvec2(0);

    double R2 = R * R;
    int iter_count = 0;
    while (true) {
        z = f(z, c);
        iter_count++;
        if (dot(z, z) > R2) break;
        if (iter_count > MAX_ITER) break;
    }
   
    /*
        Algorithm taken from:
        https://web.archive.org/web/20200214073730/http://linas.org/art-gallery/escape/escape.html
    */
    vec4 color_value = vec4(0, 0, 0, 1);
    if (iter_count < MAX_ITER) {
        z = f(z, c); iter_count++;    // a couple of extra iterations helps
        z = f(z, c); iter_count++;    // decrease the size of the error term.
        float modulus = sqrt(float(dot(z, z)));
        float mu = iter_count - (log(log(modulus))) / log(2.0);
        color_value = colormap_lookup(mu);
    }

    imageStore(img, ivec2(gl_GlobalInvocationID.xy), color_value);
}

